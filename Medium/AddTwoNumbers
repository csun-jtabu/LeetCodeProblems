/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
import java.util.Stack;
import java.lang.Math;

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        Stack<Integer> stack = new Stack<>();
        ListNode start;
        ListNode current;
        ListNode newNode;
        
        
        int = 0;
        int num2 = 0;
        int power = -1;
        
        while(l1 != null)
        {
            stack.push(l1.val);
            power++;
            l1 = l1.next;
        }
        
        while(!stack.isEmpty())
        {
            num1 = (int)(Math.pow(10 , power) * stack.pop()) + num1;
            power--;
        }
        
        power = -1;
        
        while(l2 != null)
        {
            stack.push(l2.val);
            power++;
            l2 = l2.next;
        }
        
        while(!stack.isEmpty())
        {
            num2 = (int)(Math.pow(10 , power) * stack.pop()) + num2;
            power--;
        }
        
        num1 = num1 + num2;
        System.out.println(num1);
        num2 = num1 % 10;
        num1 = num1 / 10;
        
        start = new ListNode((int)num2);
        
        current = start;
        
        while(num1 != 0 || current.next != null)
        {
            num2 = num1 % 10;
            num1 = num1 / 10;
            newNode = new ListNode((int)num2);
            
            current.next = newNode;
            current = current.next;
        }
        
        return start;
    }
}
