/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        
        ListNode newList = new ListNode();
        ListNode head = new ListNode();
        
        if((list1 == null) && (list2 == null))
        {
            newList = null;
            return newList;
        }
        else if((list1 != null) && (list2 == null))
        {
            return list1;
        }
        else if((list1 == null) && (list2 != null))
        {
            return list2;
        }
        else
        {}
        
        
        if(list1.val <= list2.val)
        {
            newList.val = list1.val;
            list1 = list1.next;
        }
        else
        {
            newList.val = list2.val;
            list2 = list2.next;
        }
        
        head = newList;
        
        while((list1 != null) && (list2 != null) )
        {
            ListNode newNode = new ListNode();
            
            if(list1.val <= list2.val)
            {
                newNode.val = list1.val;
                newNode.next = null;
                newList.next = newNode;
                list1 = list1.next;
            }
            else //(list2.val < list1.val)
            {
                newNode.val = list2.val;
                newNode.next = null;
                newList.next = newNode;
                list2 = list2.next;
            }
            
            newList = newList.next;
        }
        
        while(list1 != null)
        {
            ListNode finalNode = new ListNode();
            finalNode.val = list1.val;
            newList.next = finalNode;
            newList = newList.next;
            list1 = list1.next;
        }
        
        while(list2 != null)
        {
            ListNode finalNode2 = new ListNode();
            finalNode2.val = list2.val;
            newList.next = finalNode2;
            newList = newList.next;
            list2 = list2.next;
            
        }
        
        return head;
    }
}
